@misc{java,
	author = {{Java Platform, Standard Edition}},
	title = {{Java Development Kit Version 11 API Specification}},
	howpublished = {https://docs.oracle.com/en/java/javase/11/docs/api},
	year = {2019},
	note = {Accessed: 2019-06-01},
}

@misc{gc:oracle,
	author = {{Oracle GC}},
	title = {{Java Garbage Collection Basics}},
	howpublished = {https://www.oracle.com/webfolder/technetwork/ tutorials/obe/java/gc01/index.html},
	year = {2019},
	note = {Accessed: 2019-06-01},
}

@misc{visualvm:oracle,
	author = {Oracle VisualVM},
	title = {{Java VisualVM}},
	howpublished = {https://docs.oracle.com/javase/8/docs/technotes/ guides/visualvm/index.html},
	year = {2019},
	note = {Accessed: 2019-06-01},
}

@misc{jdk:valhalla,
	author = {Project Valhalla},
	title = {{OpenJDK Project Valhalla}},
	howpublished = {https://openjdk.java.net/projects/valhalla/},
	year = {2019},
	note = {Accessed: 2019-06-01},
}


@book{gosling:2014,
	author = {Gosling, James and Joy, Bill and Steele, Guy L. and Bracha, Gilad and Buckley, Alex},
	title = {{The Java Language Specification, Java SE 8 Edition}},
	year = {2014},
	isbn = {013390069X, 9780133900699},
	edition = {1st},
	publisher = {Addison-Wesley Professional},
} 

@book{lindholm:2014,
	author = {Lindholm, Tim and Yellin, Frank and Bracha, Gilad and Buckley, Alex},
	title = {{The Java Virtual Machine Specification, Java SE 8 Edition}},
	year = {2014},
	isbn = {013390590X, 9780133905908},
	edition = {1st},
	publisher = {Addison-Wesley Professional},
} 

@inproceedings{grgic:2018,
	author = {Grgic, Hrvoje and Mihaljevic, Branko and Radovan, Aleksander},
	year = {2018},
	month = {05},
	pages = {1539-1544},
	title = {Comparison of garbage collectors in Java programming language},
	doi = {10.23919/MIPRO.2018.8400277}
}

@book{hunt:2016,
	author = {Hunt, Charlie and Beckwith, Monica and Parhar, Poonam and Rutisson, Bengt},
	title = {Java Performance Companion},
	year = {2016},
	isbn = {0133796825, 9780133796827},
	edition = {1st},
	publisher = {Addison-Wesley Professional},
} 

@book{oaks:2014,
	author = {Oaks, Scott},
	title = {{Java Performance: The Definitive Guide}},
	year = {2014},
	isbn = {1449358454, 9781449358457},
	edition = {1st},
	publisher = {O'Reilly Media, Inc.}
} 

@article{costanza:2019,
	author = {Pascal Costanza and Charlotte Herzeel and Wilfried Verachtert},
	title ={Comparing Ease of Programming in {C++}, {Go}, and {Java} for Implementing a Next-Generation Sequencing Tool},
	journal = {Evolutionary Bioinformatics},
	volume = {15},
	number = {},
	pages = {1176934319869015},
	year = {2019},
	doi = {10.1177/1176934319869015},
	URL = { https://doi.org/10.1177/1176934319869015 },
	eprint = { https://doi.org/10.1177/1176934319869015 },
	abstract = { elPrep is an extensible multithreaded software framework for efficiently processing Sequence Alignment/Map (SAM)/Binary Alignment/Map (BAM) files in next-generation sequencing pipelines. Similar to other SAM/BAM tools, a key challenge in elPrep is memory management, as such programs need to manipulate large amounts of data. We therefore investigated 3 programming languages with support for assisted or automated memory management for implementing elPrep, namely C++, Go, and Java. We implemented a nontrivial subset of elPrep in all 3 programming languages and compared them by benchmarking their runtime performance and memory use to determine the best language in terms of computational performance. In a previous article, we motivated why, based on these results, we eventually selected Go as our implementation language. In this article, we discuss the difficulty of achieving the best performance in each language in terms of programming language constructs and standard library support. While benchmarks are easy to objectively measure and evaluate, this is less obvious for assessing ease of programming. However, because we expect elPrep to be regularly modified and extended, this is an equally important aspect. We illustrate representative examples of challenges in all 3 languages, and give our opinion why we think that Go is a reasonable choice also in this light. }
}

@article{herzeel:2015,
	author = {Herzeel, Charlotte and Costanza, Pascal and Decap, Dries and Fostier, Jan and Reumers, Joke},
	year = {2015},
	month = {07},
	pages = {e0132868},
	title = {elPrep: High-Performance Preparation of Sequence Alignment/Map Files for Variant Calling},
	volume = {10},
	journal = {PloS one},
	doi = {10.1371/journal.pone.0132868}
}

@article{herzeel:2019,
	author = {Herzeel, Charlotte AND Costanza, Pascal AND Decap, Dries AND Fostier, Jan AND Verachtert, Wilfried},
	journal = {PLOS ONE},
	publisher = {Public Library of Science},
	title = {elPrep 4: A multithreaded framework for sequence analysis},
	year = {2019},
	month = {02},
	volume = {14},
	url = {https://doi.org/10.1371/journal.pone.0209523},
	pages = {1-16},
	abstract = {We present elPrep 4, a reimplementation from scratch of the elPrep framework for processing sequence alignment map files in the Go programming language. elPrep 4 includes multiple new features allowing us to process all of the preparation steps defined by the GATK Best Practice pipelines for variant calling. This includes new and improved functionality for sorting, (optical) duplicate marking, base quality score recalibration, BED and VCF parsing, and various filtering options. The implementations of these options in elPrep 4 faithfully reproduce the outcomes of their counterparts in GATK 4, SAMtools, and Picard, even though the underlying algorithms are redesigned to take advantage of elPrep’s parallel execution framework to vastly improve the runtime and resource use compared to these tools. Our benchmarks show that elPrep executes the preparation steps of the GATK Best Practices up to 13x faster on WES data, and up to 7.4x faster for WGS data compared to running the same pipeline with GATK 4, while utilizing fewer compute resources.},
	number = {2},
	doi = {10.1371/journal.pone.0209523}
}

@article{li:2009,
	author = {Li, Heng and Handsaker, Bob and Wysoker, Alec and Fennell, Tim and Ruan, Jue and Homer, Nils and Marth, Gabor and Abecasis, Goncalo and Durbin, Richard},
	title = {The Sequence Alignment\&\#47;Map Format and {SAMtools}},
	journal = {Bioinformatics},
	issue_date = {August 2009},
	volume = {25},
	number = {16},
	month = aug,
	year = {2009},
	issn = {1367-4803},
	pages = {2078--2079},
	numpages = {2},
	url = {http://dx.doi.org/10.1093/bioinformatics/btp352},
	doi = {10.1093/bioinformatics/btp352},
	acmid = {1613286},
	publisher = {Oxford University Press},
	address = {Oxford, UK},
} 

@inproceedings{nanz:2015,
	author = {Nanz, Sebastian and Furia, Carlo A.},
	title = {A Comparative Study of Programming Languages in {Rosetta Code}},
	booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
	series = {ICSE '15},
	year = {2015},
	isbn = {978-1-4799-1934-5},
	location = {Florence, Italy},
	pages = {778--788},
	numpages = {11},
	url = {http://dl.acm.org/citation.cfm?id=2818754.2818848},
	acmid = {2818848},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
} 

@book{molyneaux:2014,
	author = {Molyneaux, Ian},
	title = {The Art of Application Performance Testing},
	year = {2014},
	isbn = {9781491900536},
	edition = {2nd},
	publisher = {O'Reilly Media, Inc.},
} 

@book{abadi:2013,
	author = {Abadi, Daniel and Boncz, Peter and Harizopoulos, Stavros},
	title = {The Design and Implementation of Modern Column-Oriented Database Systems},
	year = {2013},
	isbn = {1601987544, 9781601987549},
	publisher = {Now Publishers Inc.},
	address = {Hanover, MA, USA},
}


@misc{fastutil,
	author = {Sebastiano Vigna},
	title = {FastUtil 8.1.0},
	howpublished = {http://fastutil.di.unimi.it/},
	year = {2019},
	note = {Accessed: 2019-06-01},
}

@inproceedings{he:2010,
	author = {He, Qinlu and Li, Zhanhuai and Zhang, Xiao},
	year = {2010},
	month = {11},
	pages = {430 - 433},
	title = {Data deduplication techniques},
	volume = {21},
	journal = {Journal of Software},
	doi = {10.1109/FITME.2010.5656539}
}

@inproceedings{manogar:2014,
	author = {Manogar, E. and Abirami, S.},
	year = {2014},
	month = {12},
	pages = {161-166},
	title = {A study on data deduplication techniques for optimized storage},
	doi = {10.1109/ICoAC.2014.7229702}
}

@article{doring:2008,
	author = {D{\"o}ring, Andreas and Weese, David and Rausch, Tobias and Knut, Reinert},
	year = {2008},
	month = {02},
	pages = {11},
	title = {SeqAn An efficient, generic C++ library for sequence analysis},
	volume = {9},
	journal = {BMC bioinformatics},
	doi = {10.1186/1471-2105-9-11}
}

@inproceedings{eimouri:2016,
	author = {Eimouri, Taees and Kent, Kenneth B. and Micic, Aleksandar and Taylor, Karl},
	title = {Using Field Access Frequency to Optimize Layout of Objects in the JVM},
	year = {2016},
	isbn = {9781450337397},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2851613.2851942},
	doi = {10.1145/2851613.2851942},
	booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
	pages = {1815–1818},
	numpages = {4},
	keywords = {JVM, field reordering, hotness, field access, frequency, object layout optimization},
	location = {Pisa, Italy},
	series = {SAC ’16}
}

@inproceedings{eimouri:2017,
	author = {Eimouri, Taees and Kent, Kenneth B. and Micic, Aleksandar},
	title = {{Optimizing the JVM Object Model Using Object Splitting}},
	year = {2017},
	publisher = {IBM Corp.},
	address = {USA},
	booktitle = {Proceedings of the 27th Annual International Conference on Computer Science and Software Engineering},
	pages = {170–179},
	numpages = {10},
	keywords = {object splitting technique, object layout optimization, JVM},
	location = {Markham, Ontario, Canada},
	series = {CASCON ’17}
}


@article{schatzl:2011,
	author = {Schatzl, Thomas and Daynès, Laurent and Mössenböck, Hanspeter},
	year = {2011},
	month = {08},
	pages = {},
	title = {{Optimized memory management for class metadata in a JVM}},
	doi = {10.1145/2093157.2093182}
}
